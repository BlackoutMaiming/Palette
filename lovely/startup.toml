[manifest]
version = "1.0.0"
dump_lua = true
priority = 0



[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
                    {name = 'colour_1', ref_table = G.C, ref_value = 'BLUE'},
                    {name = 'colour_2', ref_table = G.C, ref_value = 'WHITE'},
'''
position = 'at'
payload = '''
                    {name = 'colour_1', val = HEX(palette.config.STARTUP.COLOURO) },
                    {name = 'colour_2', val = HEX(palette.config.STARTUP.COLOURO) },
'''
match_indent = false

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])
'''
position = 'at'
payload = '''
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS[palette.config.STARTUP.CARD])
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
                local card = Card(  card_pos.x + G.ROOM.T.w/2 - G.CARD_W*card_size/2,
                                    card_pos.y + G.ROOM.T.h/2 - G.CARD_H*card_size/2,
                                    card_size*G.CARD_W, card_size*G.CARD_H, pseudorandom_element(G.P_CARDS), G.P_CENTERS.c_base)
'''
position = 'at'
payload = '''
                local card = Card(  card_pos.x + G.ROOM.T.w/2 - G.CARD_W*card_size/2,
                                    card_pos.y + G.ROOM.T.h/2 - G.CARD_H*card_size/2,
                                    card_size*G.CARD_W, card_size*G.CARD_H, pseudorandom_element(G.P_CARDS), G.P_CENTERS.c_base, {bypass_back = palette.config.STARTUP.DECK_POS})
'''
match_indent = false

